# -*- coding: utf-8 -*-
"""Submission3_farhan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13ZgztJ64xJCDZC3KpFsIVDflroH3CB0I
"""

import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import os, random, time
import pandas as pd
import numpy as np
import tensorflow as tf

os.environ['KAGGLE_USERNAME'] = "farhanarief"
os.environ['KAGGLE_KEY'] = "3b2ee775373357454f25edeeea035830"

!kaggle datasets download -d viratkothari/animal10

!unzip -q animal10.zip

base_dir = '/content/Animals-10/'

labels = os.listdir(base_dir)
countedlabel = []

file_count = []
for label in labels:
  dir = base_dir + label
  path, dirs, files = next(os.walk(dir))
  file_count.append(len(files))
print('Terdapat' + len(file_count) + 'class')

total = 0
for num in file_count:
  total += num
print('Terdapat' + str(total) + 'image')

#Pembuktian dataset memiliki image dengan resolusi yang beragam
fig = plt.figure()
img = mpimg.imread(base_dir + 'butterfly/butterfly (1011).jpeg')
ax = fig.add_subplot(1, 2, 1)
plt.imshow(img)
plt.xticks([])
plt.yticks([])
ax.set_title('Image 1')
img = mpimg.imread(base_dir + 'sheep/sheep (1020).jpeg')
ax = fig.add_subplot(1, 2, 2)
plt.imshow(img)
plt.xticks([])
plt.yticks([])
ax.set_title('Image 2')
plt.show()

#Image generator penambahan h-flip dan rotasi image
train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255,
    #horizontal_flip = True,
    #rotation_range = 135,
    validation_split = 0.2
)

validation_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255,
    validation_split = 0.2
)

img_shape = (224,224,3)
train_generator = train_datagen.flow_from_directory(
    base_dir,
    shuffle = True,
    target_size = img_shape[:2],
    class_mode = 'categorical',
    batch_size = 100,
    subset = 'training'
)
validation_generator = validation_datagen.flow_from_directory(
    base_dir,
    shuffle = True,
    target_size = img_shape[:2],
    class_mode = 'categorical',
    batch_size = 10,
    subset = 'validation'
)

#Penggunaan pre-trained model ResNet50V2
base_model = tf.keras.applications.ResNet50V2(input_shape=img_shape, include_top=False)

#Pembuatan model
model = tf.keras.models.Sequential([
    base_model,                                  
    tf.keras.layers.Conv2D(16, (4,4), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(86, activation='relu'),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Dense(10, activation='softmax')])
model.compile(loss='categorical_crossentropy',optimizer='adamax',metrics=['accuracy'])
model.summary()

#Pendefinisian callback
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.96 and logs.get('val_accuracy')>0.92):
      print("\nAkurasi telah mencapai >96% dan Val_Akurasi telah mencapai >0.92%!")
      self.model.stop_training = True
callbacks = myCallback()

from matplotlib import pyplot as plt

with tf.device('/device:GPU:0'):
  history = model.fit(
        train_generator,
        steps_per_epoch=50, 
        epochs=100,
        callbacks=[callbacks],
        validation_data=validation_generator,
        validation_steps=10,
        verbose=1
        )

# plot akurasi dari history
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot loss dari history
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)